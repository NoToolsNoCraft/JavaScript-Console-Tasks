In this document, we will explore different methods to sum all numbers in an array using JavaScript. 
Here, we use let arr = [1, 2, 3, 4, 5]; as an example array.

1. Using reduce() Method

The reduce() method executes a reducer function on each element of the array, resulting in a single output value.

let arr = [1, 2, 3, 4, 5];
let sum = arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
console.log(sum); // Output: 15

2. Using a for Loop

A simple for loop iterates over the array and sums the numbers.

let arr = [1, 2, 3, 4, 5];
let sum = 0;
for (let i = 0; i < arr.length; i++) {
    sum += arr[i];
}
console.log(sum); // Output: 15

3. Using forEach() Method

The forEach() method executes a provided function once for each array element.

let arr = [1, 2, 3, 4, 5];
let sum = 0;
arr.forEach(num => sum += num);
console.log(sum); // Output: 15

4. Using for...of Loop

A for...of loop is a modern way to iterate over arrays.

let arr = [1, 2, 3, 4, 5];
let sum = 0;
for (let num of arr) {
    sum += num;
}
console.log(sum); // Output: 15

5. Using eval() (Not Recommended)

The eval() function can evaluate JavaScript code represented as a string, but this is not recommended due to security concerns.

**let arr = [1, 2, 3, 4, 5];
let sum = eval(arr.join('+'));
console.log(sum); // Output: 15**

6. Using reduceRight() Method

reduceRight() works similarly to reduce() but processes the array from right to left.

**let arr = [1, 2, 3, 4, 5];
let sum = arr.reduceRight((accumulator, currentValue) => accumulator + currentValue, 0);
console.log(sum); // Output: 15**

7. Using map() and reduce() Combination

While map() is not necessary here, it can be combined with reduce().

let arr = [1, 2, 3, 4, 5];
let sum = arr.map(num => num).reduce((acc, cur) => acc + cur, 0);
console.log(sum); // Output: 15

Conclusion

Each method provides a different approach for summing numbers in an array, allowing for flexibility depending on your use case or coding style. The reduce() method is commonly preferred for its concise and functional nature.
